================================
Test cases for  0-add_integer.py
================================

This module has only one function ``add_integer()``.

Usage
=====
``add_integer()`` returns the addition of it's two parameters. For numbers,
that value is equivalent to using the ``+`` operator, both parameters must either be
an integer or a float.

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers (a = 2, b = 3).
    >>> add_integer(2, 3)
    5

Adding one positive and one negative integer (a = 2, b = -3).
    >>> add_integer(2, -3)
    -1

Adding two negative integers (a = -2, b = -3).
    >>> add_integer(-2, -3)
    -5

Adding two floats (a = 2.1, b = 3.5).
    >>> add_integer(2.1, 3.5)
    5

Adding one integer and one float (a = 2, b = 8.3).
    >>> add_integer(2, 3.5)
    5

Adding one integer to the second parameter which default to 98 (a = 2, b = 98)
    >>> add_integer(2)
    100

Adding negative float and negative integer (a = -2.5, b = -7)
    >>> add_integer(-2.5, -7)
    -9

Adding two negative floats (a = -8.3 b = -6.9)
    >>> add_integer(-8.3, -6.9)
    -14

Adding a list ([2, 3])
    >>> add_integer([2, 3])
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple ((2, 3))
    >>> add_integer((2, 3))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a string to the second parameter which defaults to 98(a = "School", b = 98)
    >>> add_integer("School")
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two strings (a = "Hello", b = "School").
    >>> add_integer("Hello", 'School')
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding one integer and one string (a = 2, b = "School")
    >>> add_integer(2, "School")
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

Passing a None parameter to the function
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Passing a NAN number(float('nan'))
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
              ...
    ValueError: cannot convert float NaN to integer

Passing INF (float('inf'))
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
              ...
    OverflowError: cannot convert float infinity to integer
