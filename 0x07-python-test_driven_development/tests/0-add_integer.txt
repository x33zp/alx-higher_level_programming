================================
Test cases for  0-add_integer.py
================================

This module has only one function ``add_integer``.

Usage
=====
``add_integer()``` returns the addition of it's two arguments. For numbers,
that value is equivalent to using the ``+`` operator.


Importing function from the module::
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers (a = 2, b = 3).
    >>> add_integer(2, 3)
    5

Adding one positive and one negative integer (a = 2, b = -3).
    >>> add_integer(2, -3)
    -1

Adding two negative integers (a = -2, b = -3).
    >>> add_integer(-2, -3)
    -5

Adding two floats (a = 2.1, b = 3.5).
    >>> add_integer(2.1, 3.5)
    5

Adding one integer and one float (a = 2, b = 8.3).
    >>> add_integer(2, 3.5)
    5

Adding one integer to the second parameter which default to 98 (a = 2, b = 98)
    >>> add_integer(2)
    100

Adding two strings (a = '2', b = '3').
    >>> add_integer('2', '3')
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding one integer and one string (a = 2, b = "School")
    >>> add_integer(2, "School")
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

Passing a None argument to the function
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer
